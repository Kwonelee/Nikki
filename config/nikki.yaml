# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 机场订阅
proxy-providers:
  Airport1:
    url: "https://substore.com"
    type: http
    interval: 86400
    health-check:
      enable: true
      # url: https://www.gstatic.com/generate_204
      url: https://www.apple.com/library/test/success.html
      interval: 300
    proxy: DIRECT

# 节点信息
proxies:
  - {name: DIRECT, type: direct}
  - {name: REJECT, type: reject}
  

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: "/etc/nikki/run/ui"
external-ui-name: Zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 202.96.128.86
    - 202.96.134.33
 
# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr {type: select, proxies: [🌍 Proxy, 🇭🇰 中文自动, 🇺🇲 美国自动, 🇸🇬 新加坡自动, 🇭🇰 香港自动, 🏴 台湾自动, 🇯🇵 日韩自动, 🇺🇲 美国节点, ♻️ 其他自动, 🌐 全部节点, DIRECT]}
proxy-groups:
  - {name: 🍑 MyProxy, <<: *pr}
  - {name: 🌍 Proxy, type: select, proxies: [🇭🇰 中文自动, 🇺🇲 美国自动, 🇸🇬 新加坡自动, 🇭🇰 香港自动, 🏴 台湾自动, 🇯🇵 日韩自动, 🇺🇲 美国节点, ♻️ 其他自动, ♻️ 全部自动，🌐 全部节点, DIRECT]}
  - {name: 📹 YouTube, type: select, proxies: [🇺🇳 负载均衡, 🇭🇰 中文自动, 🇺🇲 美国自动, 🇯🇵 日韩自动, ♻️ 其他自动, ♻️ 全部自动，🌐 全部节点]}
  - {name: 💻 Develop, type: select, proxies: [🌍 Proxy,🇭🇰 中文自动, 🇺🇲 美国自动,  🇯🇵 日韩自动, ♻️ 其他自动, 🌐 全部节点, DIRECT]}
  - {name: 💥 AI, type: select, proxies: [🇺🇲 美国自动, 🇸🇬 新加坡自动, 🇺🇲 美国节点, 🌐 全部节点]}
  - {name: 🤪 IM, type: select, proxies: [🌍 Proxy,🇺🇲 美国自动, 🇸🇬 新加坡自动, 🇭🇰 香港自动, 🏴 台湾自动, 🇯🇵 日韩自动, ♻️ 其他自动, 🌐 全部节点]}
  - {name: 🎯 DIRECT, type: select, proxies: [DIRECT, 🌍 Proxy]}
  - {name: 🚫 REJECT, type: select, proxies: [REJECT, DIRECT]}
  - {name: 🐟 OTHER, <<: *pr}
  
  - {name: 🇺🇳 负载均衡, type: load-balance, strategy: round-robin, include-all: true, filter: "(?i)广港|广台|广新|香港|HK|Hong Kong|🇭🇰|HongKong|台湾|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan|新加坡|SG|坡|狮城|🇸🇬|Singapore", url: https://www.youtube.com/generate_204}
  - {name: 🇨🇳 中文自动, type: url-test, include-all: true, filter: "(?i)广港|广台|广新|香港|HK|Hong Kong|🇭🇰|HongKong|台湾|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan|新加坡|SG|坡|狮城|🇸🇬|Singapore", url: https://www.youtube.com/generate_204}
  - {name: 🇺🇲 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|硅谷|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States"}
  - {name: 🇸🇬 新加坡自动, type: url-test, include-all: true, filter: "(?i)新加坡|SG|坡|狮城|🇸🇬|Singapore"}
  - {name: 🇭🇰 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🏴 台湾自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(台湾|台灣|TW|Tai Wan|🇹🇼|TaiWan|Taiwan))^((?!(港|日|韩|新|深|美)).)*$"}
  - {name: 🇯🇵 日韩自动, type: url-test, include-all: true, filter: "(?i)日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|韩国|韓國|KR|首尔|春川|🇰🇷|Korea"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|硅谷|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States"}
  - {name: ♻️ 其他自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)波|柬|尼|也|克|比|尔|立|冰|秘|耳|利|埃|希|孟|芬|愛|澳|英|德|南|意|法|拿|墨|印|越|俄|瑞|智|荷|比|巴|沙|班|泰|德|烏|以|Australia|Konghwaguk"}
  # - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  # - {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: ♻️ 全部自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(DIRECT|REJECT)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}
# 负载均衡 type: load-balance   strategy: round-robin / consistent-hashing / sticky-sessions


# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - RULE-SET,my_direct,🎯 DIRECT
  - RULE-SET,private_domain,🎯 DIRECT
  - RULE-SET,my_develop,💻 Develop
  - RULE-SET,github_domain,💻 Develop
  - RULE-SET,cloudflare_ip,💻 Develop,no-resolve
  - RULE-SET,cloudflare_domain,💻 Develop
  - RULE-SET,oracle_domain,💻 Develop
  - RULE-SET,speedtest_domain,💻 Develop
  - RULE-SET,my_ai,💥 AI
  - RULE-SET,ai,💥 AI
  - RULE-SET,discord_domain,💥 AI
  - RULE-SET,bing_domain,💥 AI
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,netflix_ip,📹 YouTube,no-resolve
  - RULE-SET,netflix_domain,📹 YouTube
  - RULE-SET,telegram_ip,🤪 IM,no-resolve
  - RULE-SET,telegram_domain,🤪 IM
  - RULE-SET,tiktok_domain,🤪 IM
  - RULE-SET,my_dns,🌍 Proxy
  - RULE-SET,gfw_domain,🌍 Proxy
  - RULE-SET,google_domain,🌍 Proxy
  - RULE-SET,gfw_domain,🌍 Proxy
  # - RULE-SET,geolocation-!cn,🌍 Proxy
  # - RULE-SET,cn_domain,🎯 DIRECT
  - RULE-SET,my_cn,🎯 DIRECT
  - RULE-SET,cn_ip,🎯 DIRECT
  - RULE-SET,my_block,🚫 REJECT
  - MATCH,🐟 OTHER

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  my_direct: { <<: *class, url: "https://raw.githubusercontent.com/imken/Nikki/refs/heads/main/rule/MyDirect.list"}
  my_proxy: { <<: *class, url: "https://raw.githubusercontent.com/imken/Nikki/refs/heads/main/rule/MyProxy.list"}
  my_block: { <<: *class, url: "https://raw.githubusercontent.com/imken/Nikki/refs/heads/main/rule/MyBlock.list"}
  my_develop: { <<: *class, url: "https://raw.githubusercontent.com/imken/Nikki/refs/heads/main/rule/Develop.list"}
  my_ai: { <<: *class, url: "https://raw.githubusercontent.com/imken/Nikki/refs/heads/main/rule/MyAI.list"}
  my_dns: { <<: *class, url: "https://raw.githubusercontent.com/imken/Nikki/refs/heads/main/rule/Develop.list"}
  my_cn: { <<: *class, url: "https://raw.githubusercontent.com/imken/Nikki/refs/heads/main/rule/CommonCN.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  oracle_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/oracle.mrs"}
  cloudflare_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cloudflare.mrs"}
  cloudflare_ip: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cloudflare.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  discord_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/discord.mrs"}
  bing_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bing.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  # paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  # onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  # microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  # apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  # geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  # cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  
